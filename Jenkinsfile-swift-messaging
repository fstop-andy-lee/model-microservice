node {

    def  DOCKERHUB_TOKEN_ID = 'fstop-andy-lee-dockerhub-token'     
    def  DOCKER_REGISTRY = 'docker.io'
    def  DOCKER_REGISTRY_URL = 'https://docker.io'
    def  DOCKER_NAMESPACE = 'default'
    def  DOCKER_USER = 'andylee1973'
    def  PROJECT_NAME = 'swift-messaging'
    def  IMAGE_NAME = 'andylee1973/swift-messaging'    
    def  BUILD_NUMBER = sh(script:'date +%Y-%m-%d', returnStdout: true).trim()  
	
    tools
    {
       maven "Maven3"
    }
    
    environment {
      DOCKERHUB_TOKEN = credentials(DOCKERHUB_TOKEN_ID)
      CTS = sh(script:'date +%Y-%m-%dT%H:%M:00Z', returnStdout: true).trim()	  
	  }
    
  stages {
      stage('Checkout Source') {
          //steps {             
          //      git branch: 'develop', url: 'https://github.com/fstop-andy-lee/model-microservice.git'        
          //}
          checkout scm
        }
    stage('Execute Maven') {
	       environment {
                VERSION = sh(script:'cd ./${PROJECT_NAME} && mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
           }
           steps {  
                sh 'mvn clean package -DskipTests'             
                sh 'rm ./${PROJECT_NAME}/src/environment/docker/lib/dummy'
                sh 'cp ./${PROJECT_NAME}/target/${PROJECT_NAME}-${VERSION}.jar ./${PROJECT_NAME}/src/environment/docker/lib/.'
                sh 'cp ./${PROJECT_NAME}/src/main/resources/*.yml ./${PROJECT_NAME}/src/environment/docker/conf/.'
                sh 'whoami'
                sh 'env'
          }
        }
    stage('Docker Build and Tag') {
           environment {
                VERSION = sh(script:'cd ./${PROJECT_NAME} && mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
           }
           steps {  
                sh 'sudo podman build --build-arg JAR_NAME=${PROJECT_NAME}-${VERSION}.jar -t ${IMAGE_NAME} ${PROJECT_NAME}/src/environment/docker'   
                sh 'sudo podman tag ${IMAGE_NAME} ${IMAGE_NAME}:${BUILD_NUMBER}'
          }
        }
     
    stage('Publish image to Docker Hub') {
           steps {
              withCredentials([usernamePassword(credentialsId: DOCKERHUB_TOKEN_ID, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                sh """
                    #!/bin/bash
                    #IMAGE=${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${IMAGE_NAME}
                    IMAGE=${DOCKER_REGISTRY}/${IMAGE_NAME}
                    IMAGE_WITH_TAG=\${IMAGE}:${BUILD_NUMBER}
                    sudo podman login -u \$USERNAME -p \$PASSWORD ${DOCKER_REGISTRY_URL}
                    sudo podman push \${IMAGE_WITH_TAG}  
                    sudo podman logout ${DOCKER_REGISTRY_URL}
                   """
              }  
          }
        }     
    /*
    stage('Deploy to k8s') {
           steps {
              withKubeConfig([credentialsId: 'k8s-api-key']) {
                sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                sh 'chmod u+x ./kubectl'  
                sh './kubectl get pods'
                sh '''
                  PT='{"spec":{"template":{"metadata":{"creationTimestamp":"'${CTS}'"}}}}'
                  ./kubectl patch  deployment swift-messaging  -p ${PT}
                '''
              }               
           }
    }
    */    
  }
}
